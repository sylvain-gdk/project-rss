/*
 * Ce programme permet d'importer un fil de nouvelles pour ensuite consulter ses nouvelles.
 * Il permet égallement d'exporter le fil de nouvelles dans un fichier XML et 
 * de créer, supprimer ou modifier ses nouvelles.
 */
package rss_projet4;

import java.util.ArrayList;

/**
 * Classe pour confirmer la suppression d'une nouvelle
 * @author Sylvain
 */
public class Event_confirmSuppJDialog extends javax.swing.JDialog implements Event_Subject{
    
    private final ArrayList<Event_Observer> observers; //liste des observateurs de nouvelles

    private final Controller eventsList; //accède au contrôleur
    private final Event_eventJFrame eventJFrame; //accède à la fenêtre de la nouvelle pour la fermer
    
    private final int index;
     
       
    /**
     * Constructeur de la vue de suppression de la nouvelle
     * @param eventsList le fils de nouvelles
     * @param index la position de la nouvelle dans le fil de nouvelles
     * @param eventJFrame accède à la fenêtre de la nouvelle
     */
    public Event_confirmSuppJDialog(Controller eventsList, int index, Event_eventJFrame eventJFrame) {
        this.observers = new ArrayList();
        this.eventsList = eventsList;
        this.index = index;
        this.eventJFrame = eventJFrame;
        
        initComponents();  
        
        //printInfo(eventsList.getEventList().get(index), "show event"); //imprime l'information pour debugger
        
    }  
    
    /**
     * Imprime les infos pour debugger
     * @param event la nouvelle
     * @param method la méthode employé
     */
    public void printInfo(Model_events event, String method){
        System.out.println("Method: " + method);
        System.out.println("Index: " + index);
        System.out.println("Titre: " + event.getTitre());
        System.out.println("Date: " + event.getDatePub());
        System.out.println("Lu: " + event.getLu());
        System.out.println("Favori: " + event.getFavori());
        System.out.println("------------------------------\n");
    }    
    
    /**
     * Initialise la fenêtre avec un focus sur le bouton annuler
     */
    protected void initFrame(){
        jButton_annuler.requestFocus();        
        this.setLocationRelativeTo(null);
        this.setVisible(true);    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_bottom = new javax.swing.JPanel();
        jPanel_bottom_event = new javax.swing.JPanel();
        jLabel_events_title = new javax.swing.JLabel();
        jPanel_bottom_toolbar = new javax.swing.JPanel();
        jButton_confirmer = new javax.swing.JButton();
        jButton_annuler = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setAlwaysOnTop(true);

        jPanel_bottom.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_bottom.setPreferredSize(new java.awt.Dimension(800, 435));

        jPanel_bottom_event.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_bottom_event.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 51), 2));

        jLabel_events_title.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel_events_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_events_title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/warning.png"))); // NOI18N
        jLabel_events_title.setLabelFor(jLabel_events_title);
        jLabel_events_title.setText("Êtes-vous certain de vouloir supprimer cette nouvelle?");
        jLabel_events_title.setIconTextGap(20);

        javax.swing.GroupLayout jPanel_bottom_eventLayout = new javax.swing.GroupLayout(jPanel_bottom_event);
        jPanel_bottom_event.setLayout(jPanel_bottom_eventLayout);
        jPanel_bottom_eventLayout.setHorizontalGroup(
            jPanel_bottom_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_bottom_eventLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel_events_title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        jPanel_bottom_eventLayout.setVerticalGroup(
            jPanel_bottom_eventLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_bottom_eventLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel_events_title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanel_bottomLayout = new javax.swing.GroupLayout(jPanel_bottom);
        jPanel_bottom.setLayout(jPanel_bottomLayout);
        jPanel_bottomLayout.setHorizontalGroup(
            jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_bottomLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel_bottom_event, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        jPanel_bottomLayout.setVerticalGroup(
            jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_bottomLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel_bottom_event, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        jPanel_bottom_toolbar.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_bottom_toolbar.setPreferredSize(new java.awt.Dimension(800, 60));
        jPanel_bottom_toolbar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 15));

        jButton_confirmer.setText("Oui");
        jButton_confirmer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_confirmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_confirmerActionPerformed(evt);
            }
        });
        jPanel_bottom_toolbar.add(jButton_confirmer);

        jButton_annuler.setText("Annuler");
        jButton_annuler.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_annulerActionPerformed(evt);
            }
        });
        jPanel_bottom_toolbar.add(jButton_annuler);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_bottom_toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
            .addComponent(jPanel_bottom, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel_bottom, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel_bottom_toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Bouton pour confirmer la suppression de la nouvelle
     * @param evt l'action produite
     */
    private void jButton_confirmerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_confirmerActionPerformed
        //notifie l'observateur de la nouvelle (en l'occurence le contrôleur)
        this.notifyEventObserver(eventsList.getEvent(), index, 2);
        eventJFrame.dispose();
        this.dispose();
    }//GEN-LAST:event_jButton_confirmerActionPerformed

    /**
     * Bouton d'annulation
     * @param evt l'action produite
     */
    private void jButton_annulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_annulerActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton_annulerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_annuler;
    private javax.swing.JButton jButton_confirmer;
    private javax.swing.JLabel jLabel_events_title;
    private javax.swing.JPanel jPanel_bottom;
    private javax.swing.JPanel jPanel_bottom_event;
    private javax.swing.JPanel jPanel_bottom_toolbar;
    // End of variables declaration//GEN-END:variables

    /**
     * Ajoute un objet à la liste d'observateurs de nouvelles
     * @param observer l'observateur
     */    
    @Override
    public void addEventObserver(Event_Observer observer) {
        observers.add(observer);
    }

    /**
     * Retire un objet de liste d'observateurs de nouvelles
     * @param observer l'observateur
     */
    @Override
    public void removeEventObserver(Event_Observer observer) {
        observers.remove(observer);
    }

    /**
     * Notifie les observateurs de nouvelles (en l'occurence le contrôleur)
     * @param event la nouvelle
     * @param selection sert à déterminer la rangée du tableau à sélectionner: 1 = top | 2 = none | 3 or 4 = actual | 5 = précédente | 6 = suivante
     */
    @Override
    public void notifyEventObserver(Model_events event, int index, int selection) {
        for(Event_Observer observer : observers) {            
            observer.updateController(event, index, selection);
        }
    }
}
